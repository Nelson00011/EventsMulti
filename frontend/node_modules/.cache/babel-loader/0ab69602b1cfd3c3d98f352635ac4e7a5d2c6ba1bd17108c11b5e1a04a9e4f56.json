{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aylan\\\\OneDrive\\\\Desktop\\\\events\\\\EventsMulti\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n\n  // if (data.isError) {\n  //   return <p>{data.message}</p>;\n  // }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //   status: 500,\n    // });\n\n    throw json({\n      message: \"Could no fetch details for selected event\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function loader() {\n  defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","defer","$RefreshReg$"],"sources":["C:/Users/aylan/OneDrive/Desktop/events/EventsMulti/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json,  } from 'react-router-dom';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n\r\n  // if (data.isError) {\r\n  //   return <p>{data.message}</p>;\r\n  // }\r\n  const events = data.events;\r\n\r\n  return <EventsList events={events} />;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents(){\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: 'Could not fetch events.' };\r\n    \r\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\r\n    //   status: 500,\r\n    // });\r\n\r\n    throw json({message:\"Could no fetch details for selected event\"}, {\r\n      status: 500\r\n    })\r\n  } else {\r\n    return response;\r\n  }\r\n\r\n}\r\n\r\nexport async function loader() {\r\n  defer({\r\n    events: loadEvents()\r\n  }) \r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,QAAU,kBAAkB;AAExD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGP,aAAa,EAAE;;EAE5B;EACA;EACA;EACA,MAAMQ,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBAAOJ,OAAA,CAACF,UAAU;IAACM,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACvC;AAACN,EAAA,CATQD,UAAU;EAAA,QACJL,aAAa;AAAA;AAAAa,EAAA,GADnBR,UAAU;AAWnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;;IAEA;IACA;IACA;;IAEA,MAAMhB,IAAI,CAAC;MAACiB,OAAO,EAAC;IAA2C,CAAC,EAAE;MAChEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AAEF;AAEA,OAAO,eAAeK,MAAMA,CAAA,EAAG;EAC7BC,KAAK,CAAC;IACJb,MAAM,EAAEM,UAAU;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}